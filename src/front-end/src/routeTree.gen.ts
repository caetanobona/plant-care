/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as DashboardDashboardImport } from './routes/_dashboard/_dashboard'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as AdminPlantsIndexImport } from './routes/admin/plants/index'
import { Route as DashboardDashboardIndexImport } from './routes/_dashboard/_dashboard.index'
import { Route as AdminUsersIdImport } from './routes/admin/users/$id'
import { Route as AdminPlantsIdImport } from './routes/admin/plants/$id'
import { Route as DashboardDashboardPlantsImport } from './routes/_dashboard/_dashboard.plants'

// Create/Update Routes

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardDashboardRoute = DashboardDashboardImport.update({
  id: '/_dashboard/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRoute,
} as any)

const AdminPlantsIndexRoute = AdminPlantsIndexImport.update({
  id: '/admin/plants/',
  path: '/admin/plants/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardDashboardIndexRoute = DashboardDashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardDashboardRoute,
} as any)

const AdminUsersIdRoute = AdminUsersIdImport.update({
  id: '/admin/users/$id',
  path: '/admin/users/$id',
  getParentRoute: () => rootRoute,
} as any)

const AdminPlantsIdRoute = AdminPlantsIdImport.update({
  id: '/admin/plants/$id',
  path: '/admin/plants/$id',
  getParentRoute: () => rootRoute,
} as any)

const DashboardDashboardPlantsRoute = DashboardDashboardPlantsImport.update({
  id: '/plants',
  path: '/plants',
  getParentRoute: () => DashboardDashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard/_dashboard': {
      id: '/_dashboard/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardDashboardImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/_dashboard/plants': {
      id: '/_dashboard/_dashboard/plants'
      path: '/plants'
      fullPath: '/plants'
      preLoaderRoute: typeof DashboardDashboardPlantsImport
      parentRoute: typeof DashboardDashboardImport
    }
    '/admin/plants/$id': {
      id: '/admin/plants/$id'
      path: '/admin/plants/$id'
      fullPath: '/admin/plants/$id'
      preLoaderRoute: typeof AdminPlantsIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/$id': {
      id: '/admin/users/$id'
      path: '/admin/users/$id'
      fullPath: '/admin/users/$id'
      preLoaderRoute: typeof AdminUsersIdImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/_dashboard/': {
      id: '/_dashboard/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardDashboardIndexImport
      parentRoute: typeof DashboardDashboardImport
    }
    '/admin/plants/': {
      id: '/admin/plants/'
      path: '/admin/plants'
      fullPath: '/admin/plants'
      preLoaderRoute: typeof AdminPlantsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DashboardDashboardRouteChildren {
  DashboardDashboardPlantsRoute: typeof DashboardDashboardPlantsRoute
  DashboardDashboardIndexRoute: typeof DashboardDashboardIndexRoute
}

const DashboardDashboardRouteChildren: DashboardDashboardRouteChildren = {
  DashboardDashboardPlantsRoute: DashboardDashboardPlantsRoute,
  DashboardDashboardIndexRoute: DashboardDashboardIndexRoute,
}

const DashboardDashboardRouteWithChildren =
  DashboardDashboardRoute._addFileChildren(DashboardDashboardRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof DashboardDashboardRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/plants': typeof DashboardDashboardPlantsRoute
  '/admin/plants/$id': typeof AdminPlantsIdRoute
  '/admin/users/$id': typeof AdminUsersIdRoute
  '/': typeof DashboardDashboardIndexRoute
  '/admin/plants': typeof AdminPlantsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesByTo {
  '/admin': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/plants': typeof DashboardDashboardPlantsRoute
  '/admin/plants/$id': typeof AdminPlantsIdRoute
  '/admin/users/$id': typeof AdminUsersIdRoute
  '/': typeof DashboardDashboardIndexRoute
  '/admin/plants': typeof AdminPlantsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard/_dashboard': typeof DashboardDashboardRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/_dashboard/_dashboard/plants': typeof DashboardDashboardPlantsRoute
  '/admin/plants/$id': typeof AdminPlantsIdRoute
  '/admin/users/$id': typeof AdminUsersIdRoute
  '/_dashboard/_dashboard/': typeof DashboardDashboardIndexRoute
  '/admin/plants/': typeof AdminPlantsIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/admin'
    | '/auth'
    | '/plants'
    | '/admin/plants/$id'
    | '/admin/users/$id'
    | '/'
    | '/admin/plants'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/auth'
    | '/plants'
    | '/admin/plants/$id'
    | '/admin/users/$id'
    | '/'
    | '/admin/plants'
    | '/admin/users'
  id:
    | '__root__'
    | '/_dashboard/_dashboard'
    | '/admin/'
    | '/auth/'
    | '/_dashboard/_dashboard/plants'
    | '/admin/plants/$id'
    | '/admin/users/$id'
    | '/_dashboard/_dashboard/'
    | '/admin/plants/'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardDashboardRoute: typeof DashboardDashboardRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AdminPlantsIdRoute: typeof AdminPlantsIdRoute
  AdminUsersIdRoute: typeof AdminUsersIdRoute
  AdminPlantsIndexRoute: typeof AdminPlantsIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardDashboardRoute: DashboardDashboardRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  AdminPlantsIdRoute: AdminPlantsIdRoute,
  AdminUsersIdRoute: AdminUsersIdRoute,
  AdminPlantsIndexRoute: AdminPlantsIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard/_dashboard",
        "/admin/",
        "/auth/",
        "/admin/plants/$id",
        "/admin/users/$id",
        "/admin/plants/",
        "/admin/users/"
      ]
    },
    "/_dashboard/_dashboard": {
      "filePath": "_dashboard/_dashboard.tsx",
      "children": [
        "/_dashboard/_dashboard/plants",
        "/_dashboard/_dashboard/"
      ]
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/_dashboard/_dashboard/plants": {
      "filePath": "_dashboard/_dashboard.plants.tsx",
      "parent": "/_dashboard/_dashboard"
    },
    "/admin/plants/$id": {
      "filePath": "admin/plants/$id.tsx"
    },
    "/admin/users/$id": {
      "filePath": "admin/users/$id.tsx"
    },
    "/_dashboard/_dashboard/": {
      "filePath": "_dashboard/_dashboard.index.tsx",
      "parent": "/_dashboard/_dashboard"
    },
    "/admin/plants/": {
      "filePath": "admin/plants/index.tsx"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
